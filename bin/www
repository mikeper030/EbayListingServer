#!/usr/bin/env node

/**
 * Module dependencies.
 */
const request = require('request');
const cheerio = require('cheerio');
var app = require('../app');
var debug = require('debug')('ebaymanager:server');
var http = require('http');
const cron = require("node-cron");
var ip_addresses = [];
var port_numbers = [];
module.exports.ip_addresses=ip_addresses;
module.exports.port_numbers=port_numbers;
/**
 * Get port from environment and store in Express.
 */


function proxyGenerator() {

  request("https://sslproxies.org/", function(error, response, html) {
    if (!error && response.statusCode == 200) {
      const $ = cheerio.load(html);

      $("td:nth-child(1)").each(function (index, value) {
        ip_addresses[index] = $(this).text();
      });

      $("td:nth-child(2)").each(function (index, value) {
        port_numbers[index] = $(this).text();
      });
    } else {
      console.log("Error loading proxy, please try again");
    }

    ip_addresses.join(", ");
    port_numbers.join(", ");
  });
}

// cron.schedule("0 */1 * * * *", function () {
//
//   console.log("Running Cron Job");
//   //proxyGenerator();
//
// });



var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
proxyGenerator();
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
